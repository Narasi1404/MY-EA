//+------------------------------------------------------------------+
//|                                    Advanced Scalping EA Pro.mq5 |
//|                                  Copyright 2025, Claude AI      |
//|                                             Professional Edition |
//+------------------------------------------------------------------+
#property copyright "Copyright 2025, Claude AI"
#property link      ""
#property version   "1.00"
#property description "Advanced Multi-Strategy Scalping EA - Fixed Version"

#include <Trade\Trade.mqh>
#include <Trade\PositionInfo.mqh>
#include <Trade\OrderInfo.mqh>

//--- Input Parameters
input group "=== GENERAL SETTINGS ==="
input bool     InpEnableTrading = true;                // Enable Trading
input double   InpLotSize = 0.1;                     // Fixed Lot Size
input int      InpMagicNumber = 123456;               // Magic Number
input double   InpMaxRisk = 2.0;                      // Max Risk Per Trade (%)
input int      InpMaxPositions = 3;                   // Max Simultaneous Positions
input bool     InpUseFixedLots = true;                // Use Fixed Lot Size

input group "=== SCALPING STRATEGY ==="
input int      InpFastMA = 5;                         // Fast MA Period
input int      InpSlowMA = 9;                        // Slow MA Period  
input int      InpRSIPeriod = 14;                     // RSI Period
input double   InpRSIOverbought = 70;                 // RSI Overbought Level
input double   InpRSIOversold = 30;                   // RSI Oversold Level

input group "=== RISK MANAGEMENT ==="
input double   InpStopLoss = 20;                      // Stop Loss (pips)
input double   InpTakeProfit = 30;                    // Take Profit (pips)
input double   InpTrailingStop = 10;                  // Trailing Stop (pips)
input bool     InpUseTrailing = true;                 // Enable Trailing Stop

input group "=== FILTERS ==="
input bool     InpUseSpreadFilter = true;             // Use Spread Filter
input double   InpMaxSpread = 5.0;                    // Max Spread (pips)
input bool     InpUseTimeFilter = false;              // Use Time Filter
input int      InpStartHour = 1;                      // Trading Start Hour
input int      InpEndHour = 23;                       // Trading End Hour

//--- Global Variables
CTrade         trade;
CPositionInfo  position;
COrderInfo     order;

int            fastMAHandle;
int            slowMAHandle;
int            rsiHandle;

double         fastMA[];
double         slowMA[];
double         rsi[];

datetime       lastBarTime;
double         pipValue;

//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+
int OnInit()
{
    Print("=== Initializing Advanced Scalping EA Pro ===");
    
    // Initialize trade object
    trade.SetExpertMagicNumber(InpMagicNumber);
    trade.SetDeviationInPoints(50);
    trade.SetTypeFilling(ORDER_FILLING_FOK);
    trade.LogLevel(LOG_LEVEL_ERRORS);
    
    // Calculate pip value
    pipValue = SymbolInfoDouble(_Symbol, SYMBOL_POINT);
    int digits = (int)SymbolInfoInteger(_Symbol, SYMBOL_DIGITS);
    if(digits == 5 || digits == 3)
        pipValue *= 10;
    
    Print("Symbol: ", _Symbol, ", Digits: ", digits, ", Pip Value: ", pipValue);
    
    // Initialize indicators
    fastMAHandle = iMA(_Symbol, PERIOD_CURRENT, InpFastMA, 0, MODE_EMA, PRICE_CLOSE);
    slowMAHandle = iMA(_Symbol, PERIOD_CURRENT, InpSlowMA, 0, MODE_EMA, PRICE_CLOSE);
    rsiHandle = iRSI(_Symbol, PERIOD_CURRENT, InpRSIPeriod, PRICE_CLOSE);
    
    // Check handles
    if(fastMAHandle == INVALID_HANDLE)
    {
        Print("Error creating Fast MA indicator");
        return INIT_FAILED;
    }
    if(slowMAHandle == INVALID_HANDLE)
    {
        Print("Error creating Slow MA indicator");
        return INIT_FAILED;
    }
    if(rsiHandle == INVALID_HANDLE)
    {
        Print("Error creating RSI indicator");
        return INIT_FAILED;
    }
    
    // Set array properties
    ArraySetAsSeries(fastMA, true);
    ArraySetAsSeries(slowMA, true);
    ArraySetAsSeries(rsi, true);
    
    // Wait for indicator initialization
    Sleep(1000);
    
    Print("All indicators initialized successfully");
    Print("Settings: FastMA=", InpFastMA, ", SlowMA=", InpSlowMA, ", RSI=", InpRSIPeriod);
    Print("Risk: SL=", InpStopLoss, " pips, TP=", InpTakeProfit, " pips");
    
    return INIT_SUCCEEDED;
}

//+------------------------------------------------------------------+
//| Expert deinitialization function                                 |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
{
    Print("=== Deinitializing Advanced Scalping EA Pro ===");
    IndicatorRelease(fastMAHandle);
    IndicatorRelease(slowMAHandle);
    IndicatorRelease(rsiHandle);
}

//+------------------------------------------------------------------+
//| Expert tick function                                             |
//+------------------------------------------------------------------+
void OnTick()
{
    if(!InpEnableTrading) return;
    
    // Check for new bar
    datetime currentBarTime = iTime(_Symbol, PERIOD_CURRENT, 0);
    if(lastBarTime == currentBarTime) return;
    lastBarTime = currentBarTime;
    
    // Update indicator data
    if(!UpdateIndicators()) 
    {
        Print("Failed to update indicators");
        return;
    }
    
    // Apply filters
    if(!PassFilters()) return;
    
    // Get current positions count
    int currentPositions = CountMyPositions();
    
    // Check for trading signals
    int signal = GetTradingSignal();
    
    if(signal != 0 && currentPositions < InpMaxPositions)
    {
        if(signal == 1) 
        {
            Print("BUY Signal detected - FastMA: ", fastMA[0], ", SlowMA: ", slowMA[0], ", RSI: ", rsi[0]);
            OpenBuyPosition();
        }
        else if(signal == -1) 
        {
            Print("SELL Signal detected - FastMA: ", fastMA[0], ", SlowMA: ", slowMA[0], ", RSI: ", rsi[0]);
            OpenSellPosition();
        }
    }
    
    // Manage existing positions
    if(InpUseTrailing)
        ManagePositions();
}

//+------------------------------------------------------------------+
//| Update indicator arrays                                          |
//+------------------------------------------------------------------+
bool UpdateIndicators()
{
    // Copy indicator buffers
    if(CopyBuffer(fastMAHandle, 0, 0, 3, fastMA) < 3)
    {
        Print("Failed to copy Fast MA buffer");
        return false;
    }
    
    if(CopyBuffer(slowMAHandle, 0, 0, 3, slowMA) < 3)
    {
        Print("Failed to copy Slow MA buffer");
        return false;
    }
    
    if(CopyBuffer(rsiHandle, 0, 0, 3, rsi) < 3)
    {
        Print("Failed to copy RSI buffer");
        return false;
    }
    
    return true;
}

//+------------------------------------------------------------------+
//| Count positions opened by this EA                               |
//+------------------------------------------------------------------+
int CountMyPositions()
{
    int count = 0;
    for(int i = PositionsTotal() - 1; i >= 0; i--)
    {
        if(position.SelectByIndex(i))
        {
            if(position.Symbol() == _Symbol && position.Magic() == InpMagicNumber)
                count++;
        }
    }
    return count;
}

//+------------------------------------------------------------------+
//| Apply trading filters                                            |
//+------------------------------------------------------------------+
bool PassFilters()
{
    // Spread filter
    if(InpUseSpreadFilter)
    {
        double ask = SymbolInfoDouble(_Symbol, SYMBOL_ASK);
        double bid = SymbolInfoDouble(_Symbol, SYMBOL_BID);
        double spread = (ask - bid) / pipValue;
        
        if(spread > InpMaxSpread) 
        {
            Print("Spread too high: ", spread, " pips");
            return false;
        }
    }
    
    // Time filter
    if(InpUseTimeFilter)
    {
        MqlDateTime timeStruct;
        TimeToStruct(TimeCurrent(), timeStruct);
        if(timeStruct.hour < InpStartHour || timeStruct.hour > InpEndHour) 
        {
            return false;
        }
    }
    
    return true;
}

//+------------------------------------------------------------------+
//| Get trading signal                                               |
//+------------------------------------------------------------------+
int GetTradingSignal()
{
    // Ensure we have valid data
    if(ArraySize(fastMA) < 3 || ArraySize(slowMA) < 3 || ArraySize(rsi) < 3)
        return 0;
        
    if(fastMA[0] == 0 || slowMA[0] == 0 || rsi[0] == 0)
        return 0;
    
    // MA Cross Signal with RSI confirmation
    bool buySignal = false;
    bool sellSignal = false;
    
    // Buy Signal: Fast MA crosses above Slow MA + RSI conditions
    if(fastMA[0] > slowMA[0] && fastMA[1] <= slowMA[1])
    {
        if(rsi[0] > InpRSIOversold && rsi[0] < 60)
        {
            buySignal = true;
        }
    }
    
    // Sell Signal: Fast MA crosses below Slow MA + RSI conditions  
    if(fastMA[0] < slowMA[0] && fastMA[1] >= slowMA[1])
    {
        if(rsi[0] < InpRSIOverbought && rsi[0] > 40)
        {
            sellSignal = true;
        }
    }
    
    if(buySignal) return 1;
    if(sellSignal) return -1;
    
    return 0;
}

//+------------------------------------------------------------------+
//| Open buy position                                                |
//+------------------------------------------------------------------+
void OpenBuyPosition()
{
    double ask = SymbolInfoDouble(_Symbol, SYMBOL_ASK);
    double sl = ask - InpStopLoss * pipValue;
    double tp = ask + InpTakeProfit * pipValue;
    
    double lots = GetLotSize();
    
    if(trade.Buy(lots, _Symbol, ask, sl, tp, "Scalping EA Buy"))
    {
        Print("BUY position opened: Price=", ask, ", SL=", sl, ", TP=", tp, ", Lots=", lots);
    }
    else
    {
        Print("Failed to open BUY position. Error: ", trade.ResultRetcode(), " - ", trade.ResultRetcodeDescription());
    }
}

//+------------------------------------------------------------------+
//| Open sell position                                               |
//+------------------------------------------------------------------+
void OpenSellPosition()
{
    double bid = SymbolInfoDouble(_Symbol, SYMBOL_BID);
    double sl = bid + InpStopLoss * pipValue;
    double tp = bid - InpTakeProfit * pipValue;
    
    double lots = GetLotSize();
    
    if(trade.Sell(lots, _Symbol, bid, sl, tp, "Scalping EA Sell"))
    {
        Print("SELL position opened: Price=", bid, ", SL=", sl, ", TP=", tp, ", Lots=", lots);
    }
    else
    {
        Print("Failed to open SELL position. Error: ", trade.ResultRetcode(), " - ", trade.ResultRetcodeDescription());
    }
}

//+------------------------------------------------------------------+
//| Get lot size                                                     |
//+------------------------------------------------------------------+
double GetLotSize()
{
    if(InpUseFixedLots)
        return InpLotSize;
    
    // Risk-based lot sizing
    double balance = AccountInfoDouble(ACCOUNT_BALANCE);
    double riskAmount = balance * InpMaxRisk / 100.0;
    double stopDistance = InpStopLoss * pipValue;
    
    double tickValue = SymbolInfoDouble(_Symbol, SYMBOL_TRADE_TICK_VALUE);
    double tickSize = SymbolInfoDouble(_Symbol, SYMBOL_TRADE_TICK_SIZE);
    
    if(tickValue == 0 || tickSize == 0) return InpLotSize;
    
    double lots = riskAmount / (stopDistance / tickSize * tickValue);
    
    // Normalize lot size
    double minLot = SymbolInfoDouble(_Symbol, SYMBOL_VOLUME_MIN);
    double maxLot = SymbolInfoDouble(_Symbol, SYMBOL_VOLUME_MAX);
    double lotStep = SymbolInfoDouble(_Symbol, SYMBOL_VOLUME_STEP);
    
    lots = MathMax(lots, minLot);
    lots = MathMin(lots, maxLot);
    
    if(lotStep > 0)
        lots = NormalizeDouble(MathRound(lots / lotStep) * lotStep, 2);
    
    return lots;
}

//+------------------------------------------------------------------+
//| Manage existing positions                                        |
//+------------------------------------------------------------------+
void ManagePositions()
{
    for(int i = PositionsTotal() - 1; i >= 0; i--)
    {
        if(position.SelectByIndex(i))
        {
            if(position.Symbol() == _Symbol && position.Magic() == InpMagicNumber)
            {
                TrailingStop(position.Ticket());
            }
        }
    }
}

//+------------------------------------------------------------------+
//| Trailing stop function                                           |
//+------------------------------------------------------------------+
void TrailingStop(ulong ticket)
{
    if(!position.SelectByTicket(ticket)) return;
    
    double trailDistance = InpTrailingStop * pipValue;
    double newSL = 0;
    bool modify = false;
    
    if(position.PositionType() == POSITION_TYPE_BUY)
    {
        double currentPrice = SymbolInfoDouble(_Symbol, SYMBOL_BID);
        newSL = currentPrice - trailDistance;
        
        if(newSL > position.StopLoss() + pipValue || position.StopLoss() == 0)
        {
            modify = true;
        }
    }
    else if(position.PositionType() == POSITION_TYPE_SELL)
    {
        double currentPrice = SymbolInfoDouble(_Symbol, SYMBOL_ASK);
        newSL = currentPrice + trailDistance;
        
        if(newSL < position.StopLoss() - pipValue || position.StopLoss() == 0)
        {
            modify = true;
        }
    }
    
    if(modify)
    {
        if(trade.PositionModify(ticket, newSL, position.TakeProfit()))
        {
            Print("Trailing stop updated for ticket ", ticket, " to ", newSL);
        }
    }
}

//+------------------------------------------------------------------+
//| OnTrade function                                                 |
//+------------------------------------------------------------------+
void OnTrade()
{
    // Log trade events
    if(HistorySelect(TimeCurrent() - 60, TimeCurrent()))
    {
        int total = HistoryDealsTotal();
        if(total > 0)
        {
            ulong ticket = HistoryDealGetTicket(total - 1);
            if(HistoryDealGetInteger(ticket, DEAL_MAGIC) == InpMagicNumber)
            {
                double profit = HistoryDealGetDouble(ticket, DEAL_PROFIT);
                string symbol = HistoryDealGetString(ticket, DEAL_SYMBOL);
                ENUM_DEAL_TYPE dealType = (ENUM_DEAL_TYPE)HistoryDealGetInteger(ticket, DEAL_TYPE);
                
                if(profit != 0)
                {
                    Print("Trade closed: ", EnumToString(dealType), " ", symbol, " Profit: ", profit);
                }
            }
        }
    }
}
